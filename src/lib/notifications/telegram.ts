import { supabase } from '../supabase';
import type { Staff } from '../types';

interface TelegramMessage {
  chat_id: string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown' | 'MarkdownV2';
}

export async function sendTelegramMessage(
  botToken: string,
  chatId: string,
  message: string,
  parse_mode: 'HTML' | 'Markdown' | 'MarkdownV2' = 'HTML'
): Promise<boolean> {
  try {
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const payload: TelegramMessage = {
      chat_id: chatId,
      text: message,
      parse_mode
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('Telegram API error:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
}

export async function sendTelegramAppointmentNotification(
  staff: Staff,
  appointmentData: {
    clientName: string;
    serviceName: string;
    date: string;
    time: string;
    status: string;
    notes?: string;
  }
): Promise<boolean> {
  if (!staff.telegram_bot_token || !staff.telegram_chat_id) {
    console.log('Staff Telegram credentials not found');
    return false;
  }

  const message = `
üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>

üë§ –ö–ª–∏–µ–Ω—Ç: ${appointmentData.clientName}
üíÜ‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: ${appointmentData.serviceName}
üìÖ –î–∞—Ç–∞: ${appointmentData.date}
‚è∞ –í—Ä–µ–º—è: ${appointmentData.time}
üìä –°—Ç–∞—Ç—É—Å: ${appointmentData.status}
${appointmentData.notes ? `\nüìù –ó–∞–º–µ—Ç–∫–∏: ${appointmentData.notes}` : ''}

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</i>
`;

  return sendTelegramMessage(staff.telegram_bot_token, staff.telegram_chat_id, message);
}

export async function sendTelegramAvailabilityUpdate(
  staffId: string,
  updateData: {
    staffName: string;
    type: 'working_hours' | 'time_off' | 'staff_created' | 'staff_updated' | 'staff_deleted';
    details: string;
  }
): Promise<boolean> {
  try {
    const { data: staff, error } = await supabase
      .from('staff')
      .select('telegram_bot_token, telegram_chat_id')
      .eq('id', staffId)
      .single();

    if (error || !staff?.telegram_bot_token || !staff?.telegram_chat_id) {
      console.log('Staff Telegram credentials not found:', error);
      return false;
    }

    const message = `
üìã <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>

üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${updateData.staffName}
üîÑ –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${updateData.type === 'working_hours' ? '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã' : '–û—Ç–ø—É—Å–∫/–≤—ã—Ö–æ–¥–Ω–æ–π'}
‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏: ${updateData.details}

<i>–û–±–Ω–æ–≤–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.</i>
`;

    return sendTelegramMessage(staff.telegram_bot_token, staff.telegram_chat_id, message);
  } catch (error) {
    console.error('Error sending Telegram availability update:', error);
    return false;
  }
}

export async function sendTelegramCancellationNotification(
  staff: Staff,
  appointmentData: {
    clientName: string;
    serviceName: string;
    date: string;
    time: string;
    reason?: string;
  }
): Promise<boolean> {
  if (!staff.telegram_bot_token || !staff.telegram_chat_id) {
    console.log('Staff Telegram credentials not found');
    return false;
  }

  const message = `
‚ùå <b>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</b>

üë§ –ö–ª–∏–µ–Ω—Ç: ${appointmentData.clientName}
üíÜ‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: ${appointmentData.serviceName}
üìÖ –î–∞—Ç–∞: ${appointmentData.date}
‚è∞ –í—Ä–µ–º—è: ${appointmentData.time}
${appointmentData.reason ? `\n‚ùì –ü—Ä–∏—á–∏–Ω–∞: ${appointmentData.reason}` : ''}

<i>–í—Ä–µ–º—è –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.</i>
`;

  return sendTelegramMessage(staff.telegram_bot_token, staff.telegram_chat_id, message);
}

export async function sendTelegramReminderNotification(
  staff: Staff,
  appointmentData: {
    clientName: string;
    serviceName: string;
    date: string;
    time: string;
  }
): Promise<boolean> {
  if (!staff.telegram_bot_token || !staff.telegram_chat_id) {
    console.log('Staff Telegram credentials not found');
    return false;
  }

  const message = `
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>

üë§ –ö–ª–∏–µ–Ω—Ç: ${appointmentData.clientName}
üíÜ‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: ${appointmentData.serviceName}
üìÖ –î–∞—Ç–∞: ${appointmentData.date}
‚è∞ –í—Ä–µ–º—è: ${appointmentData.time}

<i>–ó–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.</i>
`;

  return sendTelegramMessage(staff.telegram_bot_token, staff.telegram_chat_id, message);
}